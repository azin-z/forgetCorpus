from utils import Utils, bcolors, timing_decorator

class CommandLineActions:
    def __init__(self, item, show_answer):
        self.item = item
        self.showAnswer = show_answer

    def print_auto_generated_query(self):
        self.print_field_title('Autogenerated Query')
        auto_generated_query = self.item['Subject'].replace("\n", "") + self.item['Content'].replace("\n", "")
        print(bcolors.OKBLUE + auto_generated_query + bcolors.ENDC)

    @timing_decorator
    def modify_item(self):
        """Prompting for a single item"""
        self.print_item_info()
        self.print_auto_generated_query()
        while True:
            new_query = self.get_new_query(self.modifies_existing_query())
            if not len(new_query):
                break
            if self.save_entered_query(new_query):
                self.item['ForgetQuery'] = new_query
                break
        return len(new_query) > 0

    @staticmethod
    def user_continues():
        return input('Press enter to go to next query. Press anything else to exit. ') == ''
    @staticmethod
    def print_field_title(string):
        print(bcolors.BOLD + string + ':\t', end=bcolors.ENDC)

    @staticmethod
    def print_field_text(string):
        print(bcolors.OKGREEN + string + bcolors.ENDC)

    def print_item_info(self):
        self.print_field_title('Subject')
        self.print_field_text(self.item['Subject'])
        self.print_field_title('Content')
        self.print_field_text(self.item['Content'])
        if self.showAnswer:
            self.print_field_title('Chosen Answer')
            self.print_field_text(self.item['ChosenAnswer'])

    def modifies_existing_query(self):
        if 'ForgetQuery' in self.item:
            self.print_field_title('Existing Query')
            print(bcolors.OKBLUE + self.item['ForgetQuery'] + bcolors.ENDC)
            return True
        return False

    @staticmethod
    def save_entered_query(new_query):
        print('Save following query: ' + bcolors.OKBLUE + new_query + '? ' + bcolors.ENDC)
        return input('Enter to save, anything else to redo.') == ''

    @staticmethod
    def get_new_query(modify=False):
        modify_str = ''
        if modify:
            modify_str = 'new '
        return input('Provide a ' + modify_str + 'query for given item or press enter to skip:\n')


